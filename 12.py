# PROBLEM 12

# The sequence of triangle numbers is generated by adding the natural
# numbers. So the 7th triangle number would be
#               1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
# The first ten terms would be:
#       1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:
#
#                    1: 1
#                    3: 1,3
#                    6: 1,2,3,6
#                    10: 1,2,5,10
#                    15: 1,3,5,15
#                    21: 1,3,7,21
#                    28: 1,2,4,7,14,28
#
# We can see that 28 is the first triangle number to have over
# five divisors.
# What is the value of the first triangle number to have over
# five hundred divisors?

#!/usr/bin/env python
# -*- coding: utf-8 -*-

def gen_triangle_numbers(limit):
    """gen_triangle_numbers: Generates triangle numbers till a limit"""
    triangle_numbers = []
    current_trianle = 0
    for i in xrange(1, limit+1):
        triangle_numbers.append(current_trianle+i)
        current_trianle += i
    return triangle_numbers

def generate_divisors(number):
    """generate_divisors: Generates divisor of a number"""
    divisors = []
    for i in xrange(1, number/2+1):
        if number%i==0:
            divisors.append(i)
    return divisors

def main():
    import time
    t = time.time()
    print generate_divisors(100)
    print time.time() - t

if __name__ == '__main__':
    main()
